// Grid
@mixin generateGridSize(
	$breakpoints: $breakpoints,
	$columns: $gridColumns,
	$auto: true,
	$autoGrow: true
) {
	@if ($auto) {
		&--auto {
			flex: 0 0 auto;
			width: auto;
			max-width: none;
		}
	}
	@if ($autoGrow) {
		&--autogrow {
			flex: 1 1 auto;
			width: auto;
			max-width: none;
		}
	}
	@for $column from 1 to ($columns + 1) {
		@at-root #{&}--#{$column}-#{$columns} {
			flex-basis: percentage($column / $columns);
			max-width: percentage($column / $columns);
		}
	}
	@each $breakpoint, $value in $breakpoints {
		@include mq-checker($breakpoint) {
			@if ($auto) {
				&--auto {
					@include suffix($breakpoint) {
						flex: 0 0 auto;
						width: auto;
						max-width: none;
					}
				}
			}
			@if ($autoGrow) {
				&--autogrow {
					@include suffix($breakpoint) {
						flex: 1 0 auto;
						width: auto;
						max-width: none;
					}
				}
			}
			@for $column from 1 to ($columns + 1) {
				@at-root #{&}--#{$column}-#{$columns} {
					@include suffix($breakpoint) {
						flex-basis: percentage($column / $columns);
						max-width: percentage($column / $columns);
					}
				}
			}
		}
	}
}

@mixin generateGridPush($breakpoints: $breakpoints, $columns: $gridColumns) {
	@for $column from 1 to ($columns + 1) {
		@at-root #{&}--#{$column}-#{$columns} {
			left: percentage($column / $columns);
		}
	}
	@each $breakpoint, $value in $breakpoints {
		@include mq-checker($breakpoint) {
			@for $column from 1 to ($columns + 1) {
				@at-root #{&}--#{$column}-#{$columns} {
					@include suffix($breakpoint) {
						left: percentage($column / $columns);
					}
				}
			}
		}
	}
}

@mixin generateGridPull($breakpoints: $breakpoints, $columns: $gridColumns) {
	@for $column from 1 to ($columns + 1) {
		@at-root #{&}--#{$column}-#{$columns} {
			left: percentage(-$column / $columns);
		}
	}
	@each $breakpoint, $value in $breakpoints {
		@include mq-checker($breakpoint) {
			@for $column from 1 to ($columns + 1) {
				@at-root #{&}--#{$column}-#{$columns} {
					@include suffix($breakpoint) {
						left: percentage(-$column / $columns);
					}
				}
			}
		}
	}
}

@mixin hide-scrollbar() {
	-ms-overflow-style: none;
	scrollbar-width: none;
	&::-webkit-scrollbar {
		display: none;
	}
}

@mixin generateGridOrder($breakpoints: $breakpoints, $columns: $gridColumns) {
	@for $column from 1 to ($columns + 1) {
		@at-root #{&}--#{$column} {
			order: $column;
		}
	}
	@each $breakpoint, $value in $breakpoints {
		@include mq-checker($breakpoint) {
			@for $column from 1 to ($columns + 1) {
				@at-root #{&}--#{$column} {
					@include suffix($breakpoint) {
						order: $column;
					}
				}
			}
		}
	}
}

@mixin mq-checker($breakpoint, $type: "Up") {
	@if (map-has-key($breakpointsVars, $breakpoint + $type)) {
		@media (map-get($breakpointsVars, $breakpoint + $type)) {
			@content;
		}
	} @else {
		@error 'Unfortunately, breakpoint `#{$breakpoint}` is not defined in config.js';
	}
}

// Make utility classes
@mixin make-utils($attribute, $map, $separator: "-") {
	@each $modifier, $value in $map {
		@if (type-of($value) == "map") {
			@include make-utils($modifier, $value, $separator);
		} @else {
			&#{$separator}#{$modifier} {
				#{$attribute}: $value;
			}
		}
	}
}

// Suffix
@mixin suffix($suffix, $delimiter: "\\@") {
	&#{$delimiter}#{$suffix} {
		@content;
	}
}

// Breakpoints
@mixin generateBreakpoints($breakpoints: $breakpoints) {
	@content;
	@each $breakpoint, $value in $breakpoints {
		@include mq-checker($breakpoint) {
			@include suffix($breakpoint) {
				@content;
			}
		}
	}
}

// Text Alignment and Transformation classes
@mixin text-truncate() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin text-hide() {
	font: 0/0 a;
	color: transparent;
	text-decoration: none;
}

// Clearfix
@mixin clearfix() {
	&::before,
	&::after {
		content: "";
		display: table;
	}
	&::after {
		clear: both;
	}
}

@mixin ctx() {
	display: table-cell;
	&::after {
		clear: both;
		display: block;
		visibility: hidden;
		overflow: hidden;
		height: 0;
		line-height: 0;
		font-size: xx-large;
		content: " x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x ";
	}
}

// Hiding content
@mixin vhide() {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	border: 0;
}

// Triangle
@mixin triangle(
	$direction: "down",
	$width: 10px,
	$height: 10px,
	$color: currentColor
) {
	width: 0;
	height: 0;
	border-style: solid;
	@if ($direction == "up") {
		border-width: 0 ($width / 2) $height ($width / 2);
		border-color: transparent transparent $color transparent;
	} @else if ($direction == "down") {
		border-width: $height ($width / 2) 0 ($width / 2);
		border-color: $color transparent transparent transparent;
	} @else if ($direction == "left") {
		border-width: ($height / 2) $width ($height / 2) 0;
		border-color: transparent $color transparent transparent;
	} @else if ($direction == "right") {
		border-width: ($height / 2) 0 ($height / 2) $width;
		border-color: transparent transparent transparent $color;
	} @else if ($direction == "up-left") {
		border-width: $height $width 0 0;
		border-color: $color transparent transparent transparent;
	} @else if ($direction == "down-left") {
		border-width: $width 0 0 $height;
		border-color: transparent transparent transparent $color;
	} @else if ($direction == "up-right") {
		border-width: 0 $width $height 0;
		border-color: transparent $color transparent transparent;
	} @else if ($direction == "down-right") {
		border-width: 0 0 $height $width;
		border-color: transparent transparent $color transparent;
	}
}

// Fancybox
@function max($numbers...) {
	@return m#{a}x(#{$numbers});
}

@function min($numbers...) {
	@return m#{i}n(#{$numbers});
}
